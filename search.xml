<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于读过的书（不定期更新）</title>
    <url>/2020/01/21/book/</url>
    <content><![CDATA[<p>有时候就只喜欢闻书香味。</p>
<a id="more"></a>
<p>不知不觉就大二下学期了，但是我感觉还是什么不会啊，大一的寒假和暑假完完全全就是混过去的鸭，大一寒假就狂玩刺激战场，嗯，那个时候还叫刺激战场，苟到吐也要苟到王牌，大二暑假也是，肝到2点，还把朋友叫到我家来玩。现在看看又有什么用呢？闲来无事来总结一下自己一路走过来看过的书啦！</p>
<h2 id="学术篇"><a href="#学术篇" class="headerlink" title="学术篇"></a>学术篇</h2><h3 id="C语言程序与设计"><a href="#C语言程序与设计" class="headerlink" title="C语言程序与设计"></a><a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/3941" target="_blank" rel="noopener">C语言程序与设计</a></h3><p>大一上课的时候，用到无聊的一本书，经典红色，清华大学出版社，其中的指针我现在都没搞懂，更别说双指针了，还有寒假的时候，我们可爱的的李老师给我们布置的课设，写一个学生成绩管理系统，后来班上还真有人做了，奖励了sodu两颗糖哈哈哈。有一说一，这本书还真是有点不适合初学者，但如果有老师带就可以。说来惭愧，C语言从第一个Hello World开始学了4个多月，考试却没考好。</p>
<h3 id="C-程序与设计"><a href="#C-程序与设计" class="headerlink" title="C++程序与设计"></a><a href="https://baike.baidu.com/item/C%2B%2B%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/13878767" target="_blank" rel="noopener">C++程序与设计</a></h3><p>大一下的时候，还是这个老师，我开始意识到学习的重要性，同时也意识到娱乐的重要性，最后五五开的结局，可想而知了，老师上课的时候没有将全，可能是基于C语言基础上的，这个面向对象语言，我们那个时候就天天拿这个开玩笑，“没有对象？新建一个？”。后面的C++最实用的STL也没有强调去讲。</p>
<h2 id="文学篇"><a href="#文学篇" class="headerlink" title="文学篇"></a>文学篇</h2><h3 id="百年孤独"><a href="#百年孤独" class="headerlink" title="百年孤独"></a><a href="https://baike.baidu.com/item/%E7%99%BE%E5%B9%B4%E5%AD%A4%E7%8B%AC/688708" target="_blank" rel="noopener">百年孤独</a></h3><p>这本书虽然名字听起来很有诗意，但当你翻开书的正文部分第二页的时候，里面的名字就足够让你记不住了，我高二那个时候不知道从哪听说的这本书，书名就足够打动我了，买回来看完了马孔多家族的故事。里面的名字，我还特地做了笔记。</p>
]]></content>
      <tags>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐一首北岛的诗</title>
    <url>/2020/04/03/answer/</url>
    <content><![CDATA[<p>读起这首诗的时候，总会想起高一那会我们几个一起瞎写诗的日子。</p>
<a id="more"></a>
<h1 id="回答"><a href="#回答" class="headerlink" title="回答"></a>回答</h1><h2 id="北岛"><a href="#北岛" class="headerlink" title="北岛"></a>北岛</h2><p>卑鄙是卑鄙者的通行证，<br>高尚是高尚者的墓志铭。<br>看吧，在那镀金的天空中，<br>飘满了死者弯曲的倒影。<br>冰川纪过去了，<br>为什么到处都是冰凌？<br>好望角发现了，<br>为什么死海里千帆相竞？<br>我来到这个世界上，<br>只带着纸、绳索和身影，<br>为了在审判之前，<br>宣读那些被判决了的声音：<br>告诉你吧，世界，<br>我——不——相——信！<br>纵使你脚下有一千名挑战者，<br>那就把我算做第一千零一名。<br>我不相信天是蓝的，<br>我不相信雷的回声；<br>我不相信梦是假的，<br>我不相信死无报应。<br>如果海洋注定要决堤，<br>就让所有的苦水都注入我心中；<br>如果陆地注定要上升，<br>就让人类重新选择生存的峰顶。<br>新的转机和闪闪的星斗，<br>正在缀满没有遮拦的天空，<br>那是五千年的象形文字，<br>那是未来人们凝视的眼睛。</p>
]]></content>
      <tags>
        <tag>文学</tag>
      </tags>
  </entry>
  <entry>
    <title>你好世界</title>
    <url>/2020/04/03/hello-world/</url>
    <content><![CDATA[<p>欢迎来到 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! 这是我的第一篇博客。 戳一下 <a href="https://hexo.io/docs/" target="_blank" rel="noopener">文档</a> 就能获取更多信息。 如果在使用Hexo的时候遇到了任何问题。你都能在<a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">麻烦刑场</a> 找到答案，或者你也可以在<a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>找到答案。</p>
<a id="more"></a>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="写一篇新的稿子"><a href="#写一篇新的稿子" class="headerlink" title="写一篇新的稿子"></a>写一篇新的稿子</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>更多信息在这-&gt;: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="进行本地预览"><a href="#进行本地预览" class="headerlink" title="进行本地预览"></a>进行本地预览</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>更多信息在这-&gt; <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>更多信息在这-&gt; <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="部署到远端"><a href="#部署到远端" class="headerlink" title="部署到远端"></a>部署到远端</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>更多信息在这-&gt; <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何搭建搭建基于Hexo的个人博客</title>
    <url>/2020/01/20/build%20my%20blog/</url>
    <content><![CDATA[<p>想做什么就一定把它做好了！</p>
<a id="more"></a>
<h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><p>1.第一次看到博客是在我大一的时候，那时候还在做C的算法题，有些东西自己完全想不出来了，就去问度娘（那个时候还不会科学上网），看到了一个一个的有趣的网站，更巧的是，上面也有大部分的题解思路，我就想着自己能不能也有一个博客，来分享自己的写题经验和点，大家共勉。于是就在CSDN上发了几个自己的题解，发现好像还是跟某某大牛的不一样，他们都有自己的网站，还有打赏🙃。我以为是要学习如何做网站，如何传数据，才能做出一个像样的网站，才大一的我就放弃了(T~T)。<br>2. 第二次灵感迸发是在昨天晚上的时候，看到我🐏哥的视频里有写手把手教你搭建自己的博客，就跟着🐏哥一步一步来，最后做成了一个Hello World的博客，哈哈哈，第一次只用了2个小时就完成了，太高兴了(可能我太菜了)。废话不多说，下面给出方法（ps：如果不想看文章，可以去🐏哥b站<a href="https://www.bilibili.com/video/av44544186?t=1132" target="_blank" rel="noopener">看看</a>。</p>
<h2 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h2><ol>
<li><p>去官网下载Node.js，<a href="https://www.nodejs.org" target="_blank" rel="noopener">传送门</a>，下载安装。</p>
</li>
<li><p>打开命令行cmd，输入<code>node -v</code>，<code>npm -v</code>来检查是否安装成功。</p>
</li>
<li><p>如果电脑上没有git，需要先去官网git<a href="https://git-scm.com" target="_blank" rel="noopener">下载</a> ，安装教程<a href="https://www.jianshu.com/p/414ccd423efc" target="_blank" rel="noopener">相关链接</a> ，然后配置好环境变量，和之前做Java的时候差不多，都是把git下的bin的路径找到，添加到系统变量，<code>e.g.C:\Program Files\Git\bin</code>。最后可以通过在命令行输入<code>git</code>来检查是否安装成功。</p>
</li>
<li><p>安装hexo博客框架，在命令行输入<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>等待几分钟后，就欧克了，输入<code>cnpm -v</code>检查</p>
</li>
<li><p>通过cnpm安装hexo，输入<code>cnpm install -g hexo-cli</code>会自行下载。输入<code>hexo -v</code>检查。</p>
</li>
<li><p>在你需要建立的文件夹的文件路径那输入cmd（例如blog），在当前目录打开命令行。（这些都可以用命令行实现）接下来在命令行输入<code>hexo init</code>来初始化博客，等待几分钟。</p>
</li>
<li><p>可以去我的电脑查看生成的文件，启动博客本地端口localhost4000<code>hexo s</code>用来预览。</p>
</li>
<li><p>在命令行输入<code>hexo n “我的第一篇博客”</code>，进入source文件，你会看到我的第一篇博客.md的文件，用VScode打开，编辑保存退出。</p>
</li>
<li><p>在blog下打开命令行，输入<code>hexo -clean</code>，<code>hexo g</code>，来生成。只是在本地启动。</p>
</li>
<li><p>通过github来将博客部署到远端。首先要有一个github账号，新建一个仓库，仓库名必须是: <code>用户名.github.io</code></p>
</li>
<li><p>回到命令行blog下，输入<code>cnpm install --save hexo-deployer-git</code>，会有一些warn，不用管。</p>
</li>
<li><p>在blog中找到_config.yml，用Notepad打开，翻到最底部，修改参数<code>type： git      repo: https://github.com/你自己github账号/仓库名 branch: master</code> 保存退出。</p>
</li>
<li><p>部署到远端，还是在blog文件下命令行，输入<code>hexo d</code>，部署完成。</p>
</li>
<li><p>可以通过username.github.io访问，别人也能看，自己也能看。每次修改都要上传的远端，实现同步，可能github比较慢。</p>
</li>
<li><p>这样一篇基本的博客就完成了，里面还有很多多西可以自己去设置，自己去挖掘。这里我就不说了。</p>
</li>
<li><p>[更新于2020/4/3] 由于上次的博客搞得太花里胡哨，上传经常失败，而且加载特别慢，于是我又想重头再来了，找到了一篇<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029?depth_1-" target="_blank" rel="noopener">史上最全搭建Hexo的博客</a>，那真是手把手教的，不过在主题方面我纠结了许久，最终决定选择一个朴实无华的，结果这个太小众，动不动就出错（我没有怪作者的意思，是我看不懂英文😭），一连创建了5个blog文件，搞了整整12小时，才整出这给网站来，不容易哦，希望以后的编程之路不会使我头秃了。</p>
</li>
</ol>
<h2 id="干什么"><a href="#干什么" class="headerlink" title="干什么"></a>干什么</h2><p>   1.当然是记录自己的coding之路啊，也可以在以后的面试中给面试官一个好印象。<br>   2.也可以分享自己的题解或者学习的经验，对了，还有生活！</p>
<h2 id="总结下"><a href="#总结下" class="headerlink" title="总结下"></a>总结下</h2><p>   谢谢捧场！🤭🤭🤭</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>回溯法经典例题</title>
    <url>/2020/06/16/magicnumber/</url>
    <content><![CDATA[<p>编写一个由1-9组成的9位数，并且数字不重复，前N项能被N整除。</p>
<a id="more"></a>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int number = <span class="number">0</span>;</span><br><span class="line">int visited[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">void makenumber(int n) &#123;</span><br><span class="line">    if (n &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">"ERROR!"</span> &lt;&lt; endl;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (n == <span class="number">10</span>) &#123;</span><br><span class="line">        cout &lt;&lt; number &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int j = <span class="number">1</span>; j &lt;= <span class="number">9</span>; ++j) &#123;</span><br><span class="line">        if (!visited[j]) &#123;</span><br><span class="line">            int temp = number;</span><br><span class="line">            temp = temp * <span class="number">10</span> + j;</span><br><span class="line">            if (temp % n == <span class="number">0</span>) &#123;</span><br><span class="line">                number = temp;</span><br><span class="line">                visited[j] = <span class="number">1</span>;</span><br><span class="line">                makenumber(n + <span class="number">1</span>);</span><br><span class="line">                number = number / <span class="number">10</span>;</span><br><span class="line">                visited[j] = <span class="number">0</span>;<span class="comment">//BackTracking</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    makenumber(<span class="number">1</span>);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本题主要是采用了递归回溯法，读者需自行分析。我没有进行数学分析，只是盲目的暴力枚举。</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Hexo博客上添加基于Live2D的看板娘</title>
    <url>/2020/04/03/live2d/</url>
    <content><![CDATA[<p>自己辛辛苦苦总结的，走了不少坑。</p>
<a id="more"></a>
<h2 id="检查package-json文件里有没有这一项"><a href="#检查package-json文件里有没有这一项" class="headerlink" title="检查package.json文件里有没有这一项"></a>检查package.json文件里有没有这一项</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"hexo-helper-live2d"</span>: <span class="string">"^3.1.1"</span></span><br></pre></td></tr></table></figure>
<p>（这个文件在博客根目录下就会有）如果没有这一项的话不要紧，后面会安装的，只是如果有旧版本的话，要先卸载，我也是听大佬说的。卸载代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm uninstall hexo-helper-live2d</span><br></pre></td></tr></table></figure>
<h2 id="检查自己的core-js"><a href="#检查自己的core-js" class="headerlink" title="检查自己的core-js"></a>检查自己的core-js</h2><p>就在你的博客的根目录下，因为如果你的core-js版本低于3的话，是不支持<code>hexo-helper-live2d</code>的。会出现如下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm WARN deprecated core-js@2.6.11: </span><br><span class="line">core-js@&lt;3 is no longer maintained and not recommended <span class="keyword">for</span> usage due to the number of issues.</span><br><span class="line">Please, upgrade your dependencies to the actual version of core-js@3.</span><br></pre></td></tr></table></figure>
<p>这里我看的是这位<a href="https://blog.csdn.net/weixin_43675566/article/details/104344744" target="_blank" rel="noopener">大佬的博客</a>，大概就是强制安装一个高版本的。特别强调了全局安装，安装代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install --save  -g core-js@^3</span><br></pre></td></tr></table></figure>

<h2 id="正式安装hexo-helper-live2d"><a href="#正式安装hexo-helper-live2d" class="headerlink" title="正式安装hexo-helper-live2d"></a>正式安装hexo-helper-live2d</h2><p>代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-helper-live2d</span><br><span class="line">or</span><br><span class="line">$ npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>
<p>这个插件就好像一个应用市场，在在次基础上下载自己喜欢的板娘🤭，官网也有预览图，貌似打不开了，可以在<a href="https://blog.csdn.net/wang_123_zy/article/details/87181892?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3" target="_blank" rel="noopener">这里看</a>。顺便把<a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">官网</a>的也贴出来吧，免得迷路。这里面也有详细的介绍，只不过我看不懂罢了。<br>下载后检查自己的package.json文件里有没有多出来这一项<code>&quot;hexo-helper-live2d&quot;: &quot;^3.1.1&quot;</code>。</p>
<h2 id="选好自己的板娘后下载"><a href="#选好自己的板娘后下载" class="headerlink" title="选好自己的板娘后下载"></a>选好自己的板娘后下载</h2><p>下载代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install live2d-widget-model-shizuku</span><br></pre></td></tr></table></figure>
<p>这个我不知道怎么翻译，十足库还蛮好看的。😍下载完成后，检查自己的node_modules里有没有多出来<code>live2d-widget-model-shizuku</code>和<code>live2d-widget</code>。</p>
<h2 id="配置自己的站点-config-yml"><a href="#配置自己的站点-config-yml" class="headerlink" title="配置自己的站点_config.yml"></a>配置自己的站点_config.yml</h2><p>记住不是主题里的那个就行，代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment">#启用板娘</span></span><br><span class="line">  scriptFrom: <span class="built_in">local</span> <span class="comment">#默认</span></span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: <span class="literal">false</span> <span class="comment">#默认不启用</span></span><br><span class="line">  debug: <span class="literal">false</span> <span class="comment">#默认不启用</span></span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-shizuku <span class="comment">#这个是你要修改的！！！</span></span><br><span class="line">  display:</span><br><span class="line">    position: right <span class="comment">#在屏幕上的显示位置</span></span><br><span class="line">    width: 100 <span class="comment">#显示宽度</span></span><br><span class="line">    height: 200 <span class="comment">#显示高度</span></span><br><span class="line">  mobile:</span><br><span class="line">    show: <span class="literal">true</span> <span class="comment">#手机端是否显示</span></span><br><span class="line">  react:</span><br><span class="line">    opacity: 0.8 <span class="comment">#透明度</span></span><br></pre></td></tr></table></figure>
<h2 id="开始测试效果"><a href="#开始测试效果" class="headerlink" title="开始测试效果"></a>开始测试效果</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>先在本地打开看看效果😄，确认无误后再推远端。</p>
<h2 id="问题来了"><a href="#问题来了" class="headerlink" title="问题来了"></a>问题来了</h2><p>我刚开始也是按照流程一步一步来的，本地都能显示，可就是域名访问不了，刚开始我以为是这个文件太大了，可能要等几个小时。直到我看到<a href="https://www.e-learn.cn/topic/924109" target="_blank" rel="noopener">这篇博客</a>，我人都傻了，这么坑的吗？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">如果你和我一样是纯新手，而且完全按照上述教程进行，那么恭喜你，看板娘一定不会出现！</span><br></pre></td></tr></table></figure>
<p>本插件需要jQuery和font-awesome支持，请确保它们已在页面中加载，否则无法正常显示。而前面的教程中并没有指出这一点，因此缺少依赖的博客，一定不会加载出看板娘。<br>其次是autoload.js的路径设置问题。怎么解决就去传送门吧，反正我搞了半天没搞好，还是太菜了啊。</p>
<h2 id="最后成功了"><a href="#最后成功了" class="headerlink" title="最后成功了"></a>最后成功了</h2><p>最后的我不知道怎么了，装了又卸载换一个板娘，执行npm install出现如下提醒：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">added 253 packages from 162 contributors and audited 1117 packages <span class="keyword">in</span> 42.157s</span><br><span class="line">found 5 vulnerabilities (1 low, 4 high)</span><br><span class="line">run `npm audit fix` to fix them, or `npm audit` <span class="keyword">for</span> details html</span><br></pre></td></tr></table></figure>
<p>按照它的命令，输入之后好像是修复了某些东西，弹出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package update <span class="keyword">for</span> 5 vulns involved breaking changes</span><br><span class="line">use `npm audit fix --force` to install breaking changes; or <span class="keyword">do</span> it by hand</span><br></pre></td></tr></table></figure>
<p>就顺了这孩子吧，最后好像修复了什么什么npm就突然加载出来了。百思不得其解，也不去深究了，这里还有<a href="https://blog.csdn.net/weixin_40817115/article/details/81007774" target="_blank" rel="noopener">一篇博客</a>写<code>npm audit fix</code>的可以参考一下。</p>
<p>Tips:在blog\themes\pure\layout\layout.ejs文件的body标签中加入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/autoload.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以直接获取一只哦，只不过我不知道怎么设置参数罢了。</p>
<p>🌙溜了溜了睡觉去了🌙</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>明国时期的爱情</title>
    <url>/2020/04/05/loveword/</url>
    <content><![CDATA[<p>可能总是会想起高中的那会的笔记本上的摘抄。</p>
<a id="more"></a>
<h2 id="沈从文致张兆和"><a href="#沈从文致张兆和" class="headerlink" title="沈从文致张兆和"></a>沈从文致张兆和</h2><p>我一辈子走过许多地方的路，行过许多地方的桥，看过许多形状的云，喝过许多种类的酒，却只爱过一个正当最好年龄的人。</p>
<p>在青山绿水之间，我想牵着你的手，走过这座桥，桥上是绿叶红花，桥下是流水人家，桥的那头是青丝，桥的这头是白发。</p>
<p>我用手去触摸你的眼睛，太冷了。倘若你的眼睛这样冷，有个人的心会结成冰。</p>
<p>你的眼睛还没掉转来望我，只起了一个势，我早惊乱得同一只听到弹弓弦子响中的小雀了。</p>
<h2 id="胡兰成致张爱玲"><a href="#胡兰成致张爱玲" class="headerlink" title="胡兰成致张爱玲"></a>胡兰成致张爱玲</h2><p>梦醒来，我身在忘川，立在属于我的那块三生石旁，三生石上只有爱玲的名字，可是我看不到爱玲你在哪儿，原是今生今世已惘然，山河岁月空惆怅，而我，终将是要等着你的。</p>
<h2 id="鲁迅致许广平"><a href="#鲁迅致许广平" class="headerlink" title="鲁迅致许广平"></a>鲁迅致许广平</h2><p>我寄你的信，总要送往邮局，不喜欢放在街边的绿色邮筒中，我总疑心那里会慢一点。</p>
<h2 id="朱生豪致宋清如"><a href="#朱生豪致宋清如" class="headerlink" title="朱生豪致宋清如"></a>朱生豪致宋清如</h2><p>不要愁老之将至，你老了一定很可爱。而且，假如你老了十岁，我当然也同样老了十岁，世界也老了十岁，上帝也老了十岁，一切都是一样。</p>
<h2 id="林徽因致梁思成"><a href="#林徽因致梁思成" class="headerlink" title="林徽因致梁思成"></a>林徽因致梁思成</h2><p>梁思成问：”为什么是我？”林徽因回答说：”我会用一生来回答，你准备好了吗？”寥寥数语，却笃定从容。</p>
]]></content>
      <tags>
        <tag>文学</tag>
      </tags>
  </entry>
  <entry>
    <title>数塔问题-简单的动态规划</title>
    <url>/2020/06/25/numbertower/</url>
    <content><![CDATA[<p>如下图是一个数塔，从顶部出发在每一个节点可以选择向左或者向右走，一直走到底层，要求找出一条路径，使得路径上的数字之和最大。</p>
<a id="more"></a>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">12</span>	<span class="number">15</span></span><br><span class="line"><span class="number">10</span>	<span class="number">6</span>	<span class="number">8</span></span><br><span class="line"><span class="number">2</span>	<span class="number">18</span>	<span class="number">9</span>	<span class="number">5</span></span><br><span class="line"><span class="number">19</span>	<span class="number">7</span>	<span class="number">10</span>	<span class="number">4</span>	<span class="number">16</span></span><br></pre></td></tr></table></figure>


<h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>我们可以这样想，从最后一层倒过来看，到倒数第二层，可以选择一个较大的路径，例如，假设我们一步走到了2这里，下一步应该怎么走？只有19或7这两种选择，既然我们想让总的路径之和最大，那我们肯定每一步都要选大的。我们人脑编译器是很简单的，每次只需要倒着推，到最后一个数据就是我们的最大路径。</p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>假设这个数塔的层数是N，我们可以将这个数塔放在一个NxN的data数组里，也许只需要下三角矩阵i&gt;=j。另外，我们还就可以将每一步最大的路径的数据保存在dp数组里。用两重循环来遍历数组，我们要倒着推，所有要i–，二维的j是从左往右，j++。</p>
<table>
<thead>
<tr>
<th align="center">data</th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">9</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">12</td>
<td align="center">15</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">6</td>
<td align="center">8</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">18</td>
<td align="center">9</td>
<td align="center">5</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">19</td>
<td align="center">7</td>
<td align="center">10</td>
<td align="center">4</td>
<td align="center">16</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">dp</th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">59</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">50</td>
<td align="center">49</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">38</td>
<td align="center">34</td>
<td align="center">29</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">21</td>
<td align="center">28</td>
<td align="center">19</td>
<td align="center">21</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">19</td>
<td align="center">7</td>
<td align="center">10</td>
<td align="center">4</td>
<td align="center">16</td>
</tr>
</tbody></table>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 101 </span></span><br><span class="line"><span class="comment">//最后一层的我们需要多加一层空白数据，不然会数组下标错误</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> data[N][N];<span class="comment">//全局变量已初始化0</span></span><br><span class="line"><span class="keyword">int</span> dp[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入数塔的层数：（不超过100）"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入塔的数据"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i ; ++j) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;=<span class="number">0</span> ; --i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i ; ++j) &#123;</span><br><span class="line">            dp[i][j]=<span class="built_in">max</span>(dp[i+<span class="number">1</span>][j],dp[i+<span class="number">1</span>][j+<span class="number">1</span>])+data[i][j];</span><br><span class="line">            <span class="comment">//最后一层dp数据和data一样max(0,0)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"最大的路径和是："</span>&lt;&lt;dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">最大路径和是：<span class="number">59</span></span><br></pre></td></tr></table></figure>

<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="输出路径"><a href="#输出路径" class="headerlink" title="输出路径"></a>输出路径</h3><p>题目可能会要求我们输出我们是怎么走的，在两个表都填写完整后，第一步不用说，肯定的是data[0][0]，之后，我们用dp[i][j]（还是从dp[0][0]开始）数据减去data数组的这一个位置的数据,我们可以倒着想，我们是用下面两个数据的较大的一个加上data[i][j]数据得到这个dp[i][j]。相减的结果就是较大的那个dp[i+1][j]或者是dp[i+1][j+1]。我们就可以确定是选择了这个路径data[i+1][j]或data[i+1][j+1]。因为这一次我们是正着走的，一条路走到底，每次都选dp大的那一个data数据，只需要循环N-1次就可以了(第一步已确定)。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> node_value;</span><br><span class="line">    <span class="comment">// 首先输出塔顶元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"最大路径："</span> &lt;&lt; data[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        node_value = dp[i][j] - data[i][j];</span><br><span class="line">        <span class="keyword">if</span> (node_value == dp[i][j + <span class="number">1</span>])&#123;</span><br><span class="line">            j++;<span class="comment">//记录节点的列，输出要用</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"-&gt;"</span> &lt;&lt; data[i+<span class="number">1</span>][j];</span><br><span class="line">        &#125;<span class="comment">//右边的大，应该往右走</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"-&gt;"</span> &lt;&lt; data[i+<span class="number">1</span>][j];</span><br><span class="line">        &#125;<span class="comment">//左边的大，应该往左走 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">最大路径：<span class="number">9</span>-&gt;<span class="number">12</span>-&gt;<span class="number">10</span>-&gt;<span class="number">2</span>-&gt;<span class="number">19</span></span><br></pre></td></tr></table></figure>
<h3 id="空间优化"><a href="#空间优化" class="headerlink" title="空间优化"></a>空间优化</h3><p>其实dp数组里的数据不需要每一层都储存起来，用过之后就没用了，我们可以用覆盖的方法将二维数组优化为一维数组，也就是滚动数组。</p>
<p>参考博客：<br><a href="https://blog.csdn.net/theonegis/article/details/45801201" target="_blank" rel="noopener">动态规划：数塔问题——卡尔曼和玻尔兹曼谁曼</a></p>
]]></content>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>关于去除SQLServer中的红色下划线</title>
    <url>/2020/04/05/sqlserver/</url>
    <content><![CDATA[<p>这几天正在入门SQL，跟老师学的，老师用的是Microsoft的SQLServer，我也就跟着下了，很简单，直接去微软下载，然后接着下载<a href="https://baike.baidu.com/item/SSMS" target="_blank" rel="noopener">SSMS</a>，按照官方文档操作，一个最基本的人物表就出来了。</p>
<a id="more"></a>
<p>但是按照老师的方法来，明明已经添加过了<code>sno</code>，<code>sname</code>，<code>sdept</code>，但是查表的时候还是会出现红色下划线，强迫症表示很不爽。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">English:Invalid object name <span class="string">"xxx"</span>,Invalid column name <span class="string">"xxx"</span></span><br><span class="line">中文:对象名<span class="string">"xxx"</span>无效，列名<span class="string">"xxx"</span>无效,列名<span class="string">"xxx"</span>无效（有多少列名就有多少无效的）</span><br></pre></td></tr></table></figure>
<p>最关键的是我根本没有写错！不过最后看<a href="https://zhdaa.github.io/2018/10/24/SQLServer%E5%88%97%E5%90%8D%E6%97%A0%E6%95%88/" target="_blank" rel="noopener">大佬的博客</a>，茅塞顿开！原来是因为SQLServer的<a href="https://baike.baidu.com/item/IntelliSense" target="_blank" rel="noopener">intellisense</a>（智能感知功能）没有感知到更改，需要重新整理一下。因为我不需要这个东西，直接在工具（TOOLS）里的选项（Options）给关了。当然也有另一个方法，用快捷键即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"Ctrl+Shift+R"</span></span><br></pre></td></tr></table></figure>


<p>参考博客（大同小异）：</p>
<p><a href="https://blog.csdn.net/qq_39019865/article/details/78476604?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3" target="_blank" rel="noopener">SQL Server列名显示无效</a></p>
<p><a href="https://blog.csdn.net/bigheadsheep/article/details/7872299" target="_blank" rel="noopener">SQL Server2008 列名显示无效</a></p>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>清明追思 意满九州</title>
    <url>/2020/04/04/sadday/</url>
    <content><![CDATA[<p>2020年4月4日随笔，又是清明雨上。</p>
<a id="more"></a>
<h1 id="向所有在抗击疫情中牺牲的同志致敬"><a href="#向所有在抗击疫情中牺牲的同志致敬" class="headerlink" title="向所有在抗击疫情中牺牲的同志致敬"></a>向所有在抗击疫情中牺牲的同志致敬</h1><h1 id="愿所有被无情疫情夺去生命的同胞安息"><a href="#愿所有被无情疫情夺去生命的同胞安息" class="headerlink" title="愿所有被无情疫情夺去生命的同胞安息"></a>愿所有被无情疫情夺去生命的同胞安息</h1><p>四月四日了，明明是草长莺飞二月天就能感受到的春天，却迟迟不到来，清明节到了，我现在还在穿着大棉袄，丝毫感受不到温暖。</p>
<p>今天，我们举国同悲，举国同心，举国同行，没有哪一次重大灾难过后，不暗示着历史的进步。在家被“困”了二个月的我们，终于可以去看看疫情中的世界了。我却丝毫高兴不起来，今年的清明节，所有的网站的封面都变成了黑白色，没有多余的色彩，我看着那一抹抹的黑色，便回忆起在一个一个凌晨三点钟还坚守在岗位上的公安干警和医护人员；那一抹抹黑色，好像印在他们眼上的一个个和眼圈；那一抹抹黑色，好像是一个个亲人逝世，悲痛欲绝的时刻，顾城曾说“黑夜给了我一双黑色的眼睛，我却去用它去寻找光明”。我看着那一道道的白色，就好像看到一个个白衣天使们在前线抗击疫情的时刻，就好像是一场黑色梦中突然迸发出的光亮，给予人们前进的希望。从来就没有什么从天而降的英雄，只有挺身而出的凡人；从来就没有什么中国奇迹，只不过是人们默默的齐心协力；从来就没有什么岁月静好，只是有人替你负重前行。十字涂满鲜血，便成为仁慈的象征，在生活的路口，总有命运的哨兵，没有泪，没有叹息，没有电，没有暴风，静静逝去的，是一片片白云。</p>
<p>早上还是欲断魂的冰冷天气，现在居然出来了大太阳，大红冠子公鸡在鸣叫了。</p>
<p>莫道春光难揽取，浮云过后艳阳天。</p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客图片存储问题</title>
    <url>/2020/06/25/solvepic/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/06/25/NBpWm8.png" alt="NBpWm8.png"></p>
<a id="more"></a>

<h1 id="个人博客图片存储问题"><a href="#个人博客图片存储问题" class="headerlink" title="个人博客图片存储问题"></a>个人博客图片存储问题</h1><p>之前搭建博客的时候，只顾美化主题，一些普通的逻辑结构没有完成，就去整那些花里胡哨的主页，实在有点本末倒置，美化的一个大组成成分就是图片，而图片一般比代码和文章要大多了，就导致每次加载网页时都时非常慢的。而我们写思路的的时候，又不得不去使用一些图片，我所知道的有两种方式。</p>
<h2 id="本地上传"><a href="#本地上传" class="headerlink" title="本地上传"></a>本地上传</h2><p>当我们只需要使用少量图片时，可以本地上传，在文章中的markdown语法中，我们可以使用</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">缩略图</span>](<span class="link">/images/pic.png</span>)</span><br></pre></td></tr></table></figure>
<p>这样的语法，来插入图片。[]里的文字就是当图片加载出问题时，显示的文字，后面的链接是主题配置文件里的source/images/文件名.png。</p>
<h2 id="使用图床"><a href="#使用图床" class="headerlink" title="使用图床"></a>使用图床</h2><p>知乎上有个大佬写的各种各样的图床的一篇文章，<a href="https://zhuanlan.zhihu.com/p/35270383" target="_blank" rel="noopener">盘点国内免费好用的图床</a>。可以借鉴一下，然后呢，我一个一个试了好多，有的需要钱，有的只有几个月，要不就是很复杂，我呢，只想简简单单在描述算法或解决问题的方法时偶尔添加一些图片来加强理解，思来想去我就使用了这个，<a href="https://imgchr.com" target="_blank" rel="noopener">路过图床</a>。</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
